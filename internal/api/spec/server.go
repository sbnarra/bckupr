// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for Status.
const (
	StatusCompleted Status = "completed"
	StatusError     Status = "error"
	StatusPending   Status = "pending"
	StatusRunning   Status = "running"
)

// Defines values for StopModes.
const (
	All      StopModes = "all"
	Attached StopModes = "attached"
	Labelled StopModes = "labelled"
	Linked   StopModes = "linked"
	Writers  StopModes = "writers"
)

// Backup defines model for Backup.
type Backup struct {
	Created time.Time `json:"created"`
	Id      string    `json:"id"`
	Status  Status    `json:"status"`
	Type    string    `json:"type"`
	Volumes []Volume  `json:"volumes"`
}

// ContainersConfig defines model for ContainersConfig.
type ContainersConfig struct {
	Filters     Filters      `json:"filters"`
	LabelPrefix *string      `json:"label_prefix,omitempty"`
	StopModes   *[]StopModes `json:"stop_modes,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// Filters defines model for Filters.
type Filters struct {
	ExcludeNames   []string `json:"exclude_names"`
	ExcludeVolumes []string `json:"exclude_volumes"`
	IncludeNames   []string `json:"include_names"`
	IncludeVolumes []string `json:"include_volumes"`
}

// Restore defines model for Restore.
type Restore struct {
	Error   *string   `json:"error,omitempty"`
	Id      string    `json:"id"`
	Started time.Time `json:"started"`
	Status  Status    `json:"status"`
	Volumes []Volume  `json:"volumes"`
}

// Rotate defines model for Rotate.
type Rotate struct {
	Error   *string   `json:"error,omitempty"`
	Started time.Time `json:"started"`
	Status  Status    `json:"status"`
}

// RotateInput defines model for RotateInput.
type RotateInput struct {
	Destroy      bool   `json:"destroy"`
	PoliciesPath string `json:"policies_path"`
}

// Status defines model for Status.
type Status string

// StopModes defines model for StopModes.
type StopModes string

// Version defines model for Version.
type Version struct {
	Created string `json:"created"`
	Version string `json:"version"`
}

// Volume defines model for Volume.
type Volume struct {
	Created time.Time `json:"created"`
	Error   *string   `json:"error,omitempty"`
	Ext     string    `json:"ext"`
	Mount   string    `json:"mount"`
	Name    string    `json:"name"`
	Size    *int64    `json:"size,omitempty"`
	Status  Status    `json:"status"`
}

// Backups defines model for Backups.
type Backups = []Backup

// NotFound defines model for NotFound.
type NotFound = Error

// StartBackupJSONRequestBody defines body for StartBackup for application/json ContentType.
type StartBackupJSONRequestBody = ContainersConfig

// StartBackupWithIdJSONRequestBody defines body for StartBackupWithId for application/json ContentType.
type StartBackupWithIdJSONRequestBody = ContainersConfig

// StartRestoreJSONRequestBody defines body for StartRestore for application/json ContentType.
type StartRestoreJSONRequestBody = ContainersConfig

// RotateBackupsJSONRequestBody defines body for RotateBackups for application/json ContentType.
type RotateBackupsJSONRequestBody = RotateInput

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/backups)
	ListBackups(c *gin.Context)
	// Creates new backup
	// (POST /api/backups)
	StartBackup(c *gin.Context)
	// Deletes backup
	// (DELETE /api/backups/{id})
	DeleteBackup(c *gin.Context, id string)
	// Gets backup by id
	// (GET /api/backups/{id})
	GetBackup(c *gin.Context, id string)

	// (PUT /api/backups/{id})
	StartBackupWithId(c *gin.Context, id string)

	// (GET /api/backups/{id}/restore)
	GetRestore(c *gin.Context, id string)

	// (POST /api/backups/{id}/restore)
	StartRestore(c *gin.Context, id string)
	// Retrieves application version
	// (POST /api/rotate)
	RotateBackups(c *gin.Context)
	// Retrieves application version
	// (GET /api/version)
	GetVersion(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListBackups operation middleware
func (siw *ServerInterfaceWrapper) ListBackups(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListBackups(c)
}

// StartBackup operation middleware
func (siw *ServerInterfaceWrapper) StartBackup(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StartBackup(c)
}

// DeleteBackup operation middleware
func (siw *ServerInterfaceWrapper) DeleteBackup(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteBackup(c, id)
}

// GetBackup operation middleware
func (siw *ServerInterfaceWrapper) GetBackup(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBackup(c, id)
}

// StartBackupWithId operation middleware
func (siw *ServerInterfaceWrapper) StartBackupWithId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StartBackupWithId(c, id)
}

// GetRestore operation middleware
func (siw *ServerInterfaceWrapper) GetRestore(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRestore(c, id)
}

// StartRestore operation middleware
func (siw *ServerInterfaceWrapper) StartRestore(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StartRestore(c, id)
}

// RotateBackups operation middleware
func (siw *ServerInterfaceWrapper) RotateBackups(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RotateBackups(c)
}

// GetVersion operation middleware
func (siw *ServerInterfaceWrapper) GetVersion(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetVersion(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/backups", wrapper.ListBackups)
	router.POST(options.BaseURL+"/api/backups", wrapper.StartBackup)
	router.DELETE(options.BaseURL+"/api/backups/:id", wrapper.DeleteBackup)
	router.GET(options.BaseURL+"/api/backups/:id", wrapper.GetBackup)
	router.PUT(options.BaseURL+"/api/backups/:id", wrapper.StartBackupWithId)
	router.GET(options.BaseURL+"/api/backups/:id/restore", wrapper.GetRestore)
	router.POST(options.BaseURL+"/api/backups/:id/restore", wrapper.StartRestore)
	router.POST(options.BaseURL+"/api/rotate", wrapper.RotateBackups)
	router.GET(options.BaseURL+"/api/version", wrapper.GetVersion)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xY227jNhD9FYHtI7sy2kVR6K2bbhYB2qJIgPQhMAJaGtvclUiWHGXjBvr3gqTuonyJ",
	"HWDRN5kiz5w5nJv8QlJZKClAoCHJC9FglBQG3I8PLP1SKvuUSoEg0D4ypXKeMuRSxJ+NFHbNpFsomH36",
	"XsOaJOS7uION/VsT13BVVVGSgUk1VxaFJI2hitZP5iSbHKEwxxqnBHcKSEKY1mw3T8bYrX9KvJalyC4m",
	"wUetpQ4Z/SiQ4y4SEqO1s1hRcgsGpYaLGW/wAubbV5TcSmR4QaMeLmSzfkPJPWjDPehFbDZ4AaPdK1qD",
	"jSJdaalAI/cZkGpgCO7+11IXDElCMobwA/ICSBtLBjUXG+sKd3snywYZlgdj9M7vamM0APQk87Lw3I4K",
	"+3u3PxD2lGj4p+TaOvdgadPW2Xpvy7qzumxh5OozpGhxr6RAxgVocyXFmm+mIq55jqAPUr2ut1WU5GwF",
	"+aPSsObP9lgGa1bmVvyVvScdUt6gVI+FzE4Q5w6l+sOdOKRP40JIAJ/TE6+hWR4xHSH7bSHc6062EfJz",
	"mpcZPApWR0Irz8OSdp5PFBp6SFucXky9EomLyzBqcM5lNI7uAb2pGTqSdCpN6H565fm4m99XHfRJVebU",
	"cvKWVaMhf2S56NrLsaK9sTojnybuzDtxI1SJU08yMKjlrufLSsocmLAnlcx5ysE8Kobbw9VhuJ222CFS",
	"d63bXblUIDKLSwmIsnCI7YouhfBPVp0cvNfjetTJ2lVLe101HMtzUtfr3J3/qrmrWpQwRJZu3WLOxRfI",
	"gqi93j/beqddsDvU+bp4t3i3mMbDSNHmaNfuQlrWCXD+PDAf1vCMwfVCliL8xhancIbwf2FAiQv8+X1H",
	"hwuEDeizc8MR8Mx72e4J79OzcqV9Levs6M/arp1Hv/51Y9lyzKFdJL1rJjlDMO5mpALBFCcJ+am+b5sa",
	"zqOYKR6vug+IDTgd7f25KfImIwn5nRtsJnw6/Nz5cbGYE6bdF7dfB7Y4so2xunibZOny2wSM3tmiUs+Y",
	"XlIw+EFmu4uNvJMpbPbDJkIZrSDqhr3uhlGXUL1eFD9Ul0XB9I4k5MpZMJGAr9Gq8X0iWUUH9xa/8Kzy",
	"cWIr0lTK39x6T8sp16HX7nOqITBk6LHMHnY0HESfAPcyOE4tSt4v3h/e3n6EDsl/AmyYR6td5HpxKCCZ",
	"ZgX4QfJhrE193J3ldqFuM77S+P4+DA/ai8dxoV1SUjfE2ej/m+P2JvvWcuDcmD8qqO3RZl6cC6pmpHwN",
	"n+7r/luIg/ky2Pfx/1YH995BExS6m4CDKvnhst+jLi9Tf4B90yxp//7pl65bQM3hCUzU8yDqJrNGOrMz",
	"CEVPut7cN5dC9y3K6WQHfw6dwdYeB/3U5Fqpc5KQLaJK4jiXKcu30mDyy2KxIDZZaoCXJt2aXkXblRq6",
	"Wlb/BQAA///+4BV8sBUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
