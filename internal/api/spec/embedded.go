// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYTW/jNhD9KwLbI7sy2kVR6NZts4sAbVEkRXoIAoOWxjE3EsmSo2xcQ/+9ICnqw6Ic",
	"O3GARW8yRb158+aDQ+9ILislBQg0JNsRDUZJYcD9+MDyh1rZp1wKBIH2kSlV8pwhlyL9bKSwaybfQMXs",
	"07ca1iQj36Q9bOrfmrSFa5qGkgJMrrmyKCQLhhraPpmTbHKEyhxrnBLcKiAZYVqz7TwZY7f+IfGjrEVx",
	"NgkutJY6ZvRCIMdtIiQma2exoeQKDEoNZzMe8CLmu1eUXElkeEajHi5ms31DyQ1owz3oWWwGvIjR/hVt",
	"wfYyXWmpQCP3FZBrYAgu/mupK4YkIwVD+A55BaTLJYOai3vrCrgAZ7vpG15Elw0yrJ/N3mu/q8veCNCj",
	"LOvKsz6qIG7c/khBUKLhn5pr6/atpU07Gdq9Heve6l0HI1efIUeLexG0GGs6J9GeYb8thvuRlwjaRJCf",
	"8rIuYClYK0QBa1aXSLLbO9qrMpFuLADtcAaSvhCJi/MwCjivZbQf3BG9qRm6J+lUmlh8Bn3ruMgfKg59",
	"UvmdWk1vWTSB/JHV0vfdY0V7Y3X2fJq4M+/EpVA1Tj0pwKCW24EvKylLYMJ+KeSy0NulrsUoudesNEAj",
	"+5Usec7BLBXDzfPdZLyddlxiTlx3MnU0iAJRWFxKQNSVQ+xWdC2Ef7JqluBV2u9ffRiuUarfZdGGt4Vj",
	"ZUkoKdkKytJ9/0Vz1+UoYYgs37jFkosHKKKofzHzMCP8um+YhwIf+mrT8lgqDWv+NBZiZQ9KHcuuUyNo",
	"UKplFXQ4qvx65Z6rwOByLL6DcWP2tJ8er/1HvRiLd4t3i6kWe1zCp/05GmXlW8tbjiDwhNH1StYi/sa2",
	"/Xjv4f/CiBIX+OP7ng4XCPegX911HAHPfNBHPeFDejbu0FzLtu8Mx3uXwMnPf15athxL6BbJIMykZAjG",
	"RUYqEExxkpEf2njbJuI8Spni6aq/s9yD09HGzw2ulwXJyG/cYLhU0PEN6/vFYk6Ybl/aXUhs0rN7Y3Xx",
	"Nsmd64QmYvTatut2rPWSgsEPstiebcruG87sJSpBmawg6cfHPrSoa2heroYf4OuqYnpLMvKLs2ASAV+S",
	"VXB6olVDRwFLd7xofILYpj3V8Fe3PhBxynXstbu6BQJjhh7LHGBH49nzCfAgg+PUouT94v3z27sL75j8",
	"J8DAPFltEzfexDKRaVaBP2pu97VpP3ffcrvQnsS+xfiRaZwedJCI+x32jpL2qJtN+785bi6Lryb5X5vs",
	"R2Wz/TTM3nPZFMbzl/Dp/0L4GhJgvvENffzfdL6D4ods0N01Yjb+fseLGIQ/c049iAY2zx+O4aXjTatx",
	"4H7fG68ANYdHMMnAg6Sf+WYjNZgo50J106GcTnb0T9fJbM3WIFSWrf0c9GOo6VqXJCMbRJWlaSlzVm6k",
	"weynxWJBbFG2ALtQ1uEwpN1KC93cNf8FAAD//674fL19FgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
