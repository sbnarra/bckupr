// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYTW/jNhD9KwLbI7sy2kVR6NZts4sAbVEkRXoIjICWxjE3EsmSo2xcQ/+9ICnqw6Ic",
	"O3GARW8ORb558+aDw+xILislBQg0JNsRDUZJYcD98YHlD7Wyv3IpEATan0ypkucMuRTpZyOFXTP5Bipm",
	"f32rYU0y8k3aw6b+q0lbuKZpKCnA5Jori0KyYKih7S9zkk2OUJljjVOCWwUkI0xrtp0nY+zWPyR+lLUo",
	"zibBhdZSx4xeCOS4TYTEZO0sNpRcgUGp4WzGA17EfPeJkiuJDM9o1MPFbLZfKLkBbbgHPYvNgBcx2n+i",
	"LdhepistFWjkvgJyDQzBxX8tdcWQZKRgCN8hr4B0uWRQc3FvXQEX4Gw3/cKL6LJBhvWz2Xvtd3XZGwF6",
	"lGVdedZHFcSN2x8pCEo0/FNzbd2+tbRpJ0O7t2PdW112MHL1GXK0uBdBi7GmcxLtGfbbYrgfeYmgTQT5",
	"KS/rAu4Ea4UoYM3qEkl2u6S9KhPpxgLQDmcg6QuRuDgPo4DzWkb7wR3Rm5qhe5JOpYnFZ9C3jov8oeLQ",
	"J5XfqdX0lkUTyB9ZLX3fPVa0N1Znz6eJO/NOXApV49STAgxquR34spKyBCbsSSVLnnMwd4rh5vnuMN5O",
	"O+wYqevO7a5miAJRWFxKQNSVQ+xWdC2E/2XVKcF7vd+PelmvUarfZdGGq4VjZUkoKdkKytKd/6K561qU",
	"MESWb9xiycUDFFHUv5h5mBFy3TfAQ4EMfbJpedwpDWv+NBZiZS8+Hc8Wqe6q4NdR5dEr8VyFBBdi8RqM",
	"A7O38fT66w/1zi3eLd4tpr7tcQlH+3suysqX/luOCPCE0fVK1iL+xbbleG/g/8KIEhf44/ueDhcI96Bf",
	"3RUcAc980Oc84UN6Nu5SW8u2LwzHb5eQyc9/Xlq2HEvoFskgzKRkCMZFRioQTHGSkR/aeNum4DxKmeLp",
	"qn9T3IPT0cbPDZaXBcnIb9xgGPrp+AX0/WIxJ0y3L+0eDDbp2b2xunibZOk6m4kYvbbttB07vaRg8IMs",
	"tmebgvsGMvvISVAmK0j68a4PLeoamper4QfsuqqY3pKM/OIsmETAl2QVnJ5o1dBRwNIdLxqfILYJTzX8",
	"1a0PRJxyHXvtnlaBwJihxzIH2NF49nwCPMjgOLUoeb94//z27kE6Jv8JMDBPVtvEjR+xTGSaVeCvjtt9",
	"bdrj7iy3C+3N6luMH2nG6UEHibjfYZeUtFfXbNr/zXFzWXw1yf/aZD8qm+3RMBvPZVMYn1/Cp3/ifw0J",
	"MN/4hj7+bzrfQfFDNuhuzJ+Nv9/xIgbhny2nXkQDm+cPx/BR8KbVOHC/741XgJrDI5hk4EHSz3yzkRpM",
	"lHOhuulQTic7+k/UyWzN1iBUlq09Dvox1HStS5KRDaLK0rSUOSs30mD202KxILYoW4BdKOtwGdJupYVu",
	"ls1/AQAA///SftjJHRYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
