// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYTW/jNhD9KwLbI7sy2kVR6NZts4sAbVEkRXoIAoOWxjE3EsmSo2xcQ/+9ICnqw6Ic",
	"O3HQojeZot68efPBoXckl5WSAgQaku2IBqOkMOB+fGD5Q63sUy4FgkD7yJQqec6QS5F+NlLYNZNvoGL2",
	"6WsNa5KRr9IeNvVvTdrCNU1DSQEm11xZFJIFQw1tn8xJNjlCZY41TgluFZCMMK3Zdp6MsVt/k/hR1qI4",
	"mwQXWksdM3ohkOM2ERKTtbPYUHIFBqWGsxkPeBHz3StKriQyPKNRDxez2b6h5Aa04R70LDYDXsRo/4q2",
	"YHuZrrRUoJH7Csg1MAQX/7XUFUOSkYIhfIO8AtLlkkHNxb11BVyAs930DS+iywYZ1s9m77Xf1WVvBOhR",
	"lnXlWR9VEDduf6QgKNHwV821dfvW0qadDO3ejnVv9a6DkavPkKPFvQhajDWdk2jPsN8Ww/3ISwRtIshP",
	"eVkXsBSsFaKANatLJNntHe1VmUg3FoB2OANJX4jExXkYBZzXMtoP7oje1Azdk3QqTSw+g751XOQPFYc+",
	"qfxOraa3LJpA/shq6fvusaK9sTp7Pk3cmXfiUqgap54UYFDL7cCXlZQlMGG/FHJZ6O1S12KU3GtWGqCR",
	"/UqWPOdglorh5vluMt5OOy4xJ647mToaRIEoLC4lIOrKIXYruhbCP1k1S/Aq7fevPgzXKNWvsmjD28Kx",
	"siSUlGwFZem+/6K563KUMESWb9xiycUDFFHUP5h5mBF+3TfMQ4EPfbVpeSyVhjV/GguxsgeljmXXqRE0",
	"KNWyCjocVX69cs9VYHA5Ft/BuDF72k+P1/6jXozFu8W7xVSLPS7h0/4cjbLyreUtRxB4wuh6JWsRf2Pb",
	"frz38L9hRIkL/P59T4cLhHvQr+46joBnPuijnvAhPRt3aK5l23eG471L4OTH3y8tW44ldItkEGZSMgTj",
	"IiMVCKY4ych3bbxtE3EepUzxdNXfWe7B6Wjj5wbXy4Jk5BduMFwq6PiG9e1iMSdMty/tLiQ26dm9sbp4",
	"m+TOdUITMXpt23U71npJweAHWWzPNmX3DWf2EpWgTFaQ9ONjH1rUNTQvV8MP8HVVMb0lGfnJWTCJgC/J",
	"Kjg90aqho4ClO140PkFs055q+LNbH4g45Tr22l3dAoExQ49lDrCj8ez5BHiQwXFqUfJ+8f757d2Fd0z+",
	"E2Bgnqy2iRtvYpnINKvAHzW3+9q0n7tvuV1oT2LfYvzINE4POkjE/Q57R0l71M2m/Z8cN5fFfyb5X5vs",
	"R2Wz/TTM3nPZFMbzl/AZ/E9wej79+xkz3ymHovxvWmX/h8+B9NHdvWM2YfyOFzEI//6cenINbJ4/HMNb",
	"ypuW78D9vpleAWoOj2CSgQdJPyTORmowgs6F6qZDOZ3s6K+xk9marUGoLFv7OejHUNO1LklGNogqS9NS",
	"5qzcSIPZD4vFgtiibAF2oazD6Um7lRa6uWv+CQAA//9tkggirhYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
