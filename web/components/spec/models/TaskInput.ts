/* tslint:disable */
/* eslint-disable */
/**
 * Bckupr
 * Bckupr API
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Filters } from './Filters';
import {
    FiltersFromJSON,
    FiltersFromJSONTyped,
    FiltersToJSON,
} from './Filters';
import type { StopModes } from './StopModes';
import {
    StopModesFromJSON,
    StopModesFromJSONTyped,
    StopModesToJSON,
} from './StopModes';

/**
 * 
 * @export
 * @interface TaskInput
 */
export interface TaskInput {
    /**
     * 
     * @type {boolean}
     * @memberof TaskInput
     */
    noDryRun?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TaskInput
     */
    labelPrefix?: string;
    /**
     * 
     * @type {Array<StopModes>}
     * @memberof TaskInput
     */
    stopModes?: Array<StopModes>;
    /**
     * 
     * @type {Filters}
     * @memberof TaskInput
     */
    filters: Filters;
}

/**
 * Check if a given object implements the TaskInput interface.
 */
export function instanceOfTaskInput(value: object): boolean {
    if (!('filters' in value)) return false;
    return true;
}

export function TaskInputFromJSON(json: any): TaskInput {
    return TaskInputFromJSONTyped(json, false);
}

export function TaskInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaskInput {
    if (json == null) {
        return json;
    }
    return {
        
        'noDryRun': json['no_dry_run'] == null ? undefined : json['no_dry_run'],
        'labelPrefix': json['label_prefix'] == null ? undefined : json['label_prefix'],
        'stopModes': json['stop_modes'] == null ? undefined : ((json['stop_modes'] as Array<any>).map(StopModesFromJSON)),
        'filters': FiltersFromJSON(json['filters']),
    };
}

export function TaskInputToJSON(value?: TaskInput | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'no_dry_run': value['noDryRun'],
        'label_prefix': value['labelPrefix'],
        'stop_modes': value['stopModes'] == null ? undefined : ((value['stopModes'] as Array<any>).map(StopModesToJSON)),
        'filters': FiltersToJSON(value['filters']),
    };
}

