/* tslint:disable */
/* eslint-disable */
/**
 * Bckupr
 * Bckupr API
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Status } from './Status';
import {
    StatusFromJSON,
    StatusFromJSONTyped,
    StatusToJSON,
} from './Status';
import type { Volume } from './Volume';
import {
    VolumeFromJSON,
    VolumeFromJSONTyped,
    VolumeToJSON,
} from './Volume';

/**
 * 
 * @export
 * @interface Restore
 */
export interface Restore {
    /**
     * 
     * @type {string}
     * @memberof Restore
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof Restore
     */
    started: Date;
    /**
     * 
     * @type {Status}
     * @memberof Restore
     */
    status: Status;
    /**
     * 
     * @type {Array<Volume>}
     * @memberof Restore
     */
    volumes: Array<Volume>;
    /**
     * 
     * @type {string}
     * @memberof Restore
     */
    error?: string;
}

/**
 * Check if a given object implements the Restore interface.
 */
export function instanceOfRestore(value: object): boolean {
    if (!('id' in value)) return false;
    if (!('started' in value)) return false;
    if (!('status' in value)) return false;
    if (!('volumes' in value)) return false;
    return true;
}

export function RestoreFromJSON(json: any): Restore {
    return RestoreFromJSONTyped(json, false);
}

export function RestoreFromJSONTyped(json: any, ignoreDiscriminator: boolean): Restore {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'started': (new Date(json['started'])),
        'status': StatusFromJSON(json['status']),
        'volumes': ((json['volumes'] as Array<any>).map(VolumeFromJSON)),
        'error': json['error'] == null ? undefined : json['error'],
    };
}

export function RestoreToJSON(value?: Restore | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'started': ((value['started']).toISOString()),
        'status': StatusToJSON(value['status']),
        'volumes': ((value['volumes'] as Array<any>).map(VolumeToJSON)),
        'error': value['error'],
    };
}

