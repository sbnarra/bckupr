/**
 * Bckupr
 * Bckupr API
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Status from './Status';

/**
 * The Rotate model module.
 * @module model/Rotate
 * @version latest
 */
class Rotate {
    /**
     * Constructs a new <code>Rotate</code>.
     * @alias module:model/Rotate
     * @param started {Date} 
     * @param status {module:model/Status} 
     */
    constructor(started, status) { 
        
        Rotate.initialize(this, started, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, started, status) { 
        obj['started'] = started;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Rotate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rotate} obj Optional instance to populate.
     * @return {module:model/Rotate} The populated <code>Rotate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rotate();

            if (data.hasOwnProperty('started')) {
                obj['started'] = ApiClient.convertToType(data['started'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Status.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rotate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rotate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Rotate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }

        return true;
    }


}

Rotate.RequiredProperties = ["started", "status"];

/**
 * @member {Date} started
 */
Rotate.prototype['started'] = undefined;

/**
 * @member {module:model/Status} status
 */
Rotate.prototype['status'] = undefined;

/**
 * @member {String} error
 */
Rotate.prototype['error'] = undefined;






export default Rotate;

