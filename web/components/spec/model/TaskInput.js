/**
 * Bckupr
 * Bckupr API
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Filters from './Filters';
import StopModes from './StopModes';

/**
 * The TaskInput model module.
 * @module model/TaskInput
 * @version latest
 */
class TaskInput {
    /**
     * Constructs a new <code>TaskInput</code>.
     * @alias module:model/TaskInput
     * @param filters {module:model/Filters} 
     */
    constructor(filters) { 
        
        TaskInput.initialize(this, filters);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, filters) { 
        obj['filters'] = filters;
    }

    /**
     * Constructs a <code>TaskInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskInput} obj Optional instance to populate.
     * @return {module:model/TaskInput} The populated <code>TaskInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskInput();

            if (data.hasOwnProperty('no_dry_run')) {
                obj['no_dry_run'] = ApiClient.convertToType(data['no_dry_run'], 'Boolean');
            }
            if (data.hasOwnProperty('label_prefix')) {
                obj['label_prefix'] = ApiClient.convertToType(data['label_prefix'], 'String');
            }
            if (data.hasOwnProperty('stop_modes')) {
                obj['stop_modes'] = ApiClient.convertToType(data['stop_modes'], [StopModes]);
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = Filters.constructFromObject(data['filters']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TaskInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['label_prefix'] && !(typeof data['label_prefix'] === 'string' || data['label_prefix'] instanceof String)) {
            throw new Error("Expected the field `label_prefix` to be a primitive type in the JSON string but got " + data['label_prefix']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['stop_modes'])) {
            throw new Error("Expected the field `stop_modes` to be an array in the JSON data but got " + data['stop_modes']);
        }
        // validate the optional field `filters`
        if (data['filters']) { // data not null
          Filters.validateJSON(data['filters']);
        }

        return true;
    }


}

TaskInput.RequiredProperties = ["filters"];

/**
 * @member {Boolean} no_dry_run
 * @default false
 */
TaskInput.prototype['no_dry_run'] = false;

/**
 * @member {String} label_prefix
 * @default 'bckupr'
 */
TaskInput.prototype['label_prefix'] = 'bckupr';

/**
 * @member {Array.<module:model/StopModes>} stop_modes
 */
TaskInput.prototype['stop_modes'] = undefined;

/**
 * @member {module:model/Filters} filters
 */
TaskInput.prototype['filters'] = undefined;






export default TaskInput;

