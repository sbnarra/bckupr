/**
 * Bckupr
 * Bckupr API
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Status from './Status';

/**
 * The Volume model module.
 * @module model/Volume
 * @version latest
 */
class Volume {
    /**
     * Constructs a new <code>Volume</code>.
     * @alias module:model/Volume
     * @param name {String} 
     * @param ext {String} 
     * @param mount {String} 
     * @param status {module:model/Status} 
     * @param created {Date} 
     */
    constructor(name, ext, mount, status, created) { 
        
        Volume.initialize(this, name, ext, mount, status, created);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, ext, mount, status, created) { 
        obj['name'] = name;
        obj['ext'] = ext;
        obj['mount'] = mount;
        obj['status'] = status;
        obj['created'] = created;
    }

    /**
     * Constructs a <code>Volume</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Volume} obj Optional instance to populate.
     * @return {module:model/Volume} The populated <code>Volume</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Volume();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ext')) {
                obj['ext'] = ApiClient.convertToType(data['ext'], 'String');
            }
            if (data.hasOwnProperty('mount')) {
                obj['mount'] = ApiClient.convertToType(data['mount'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Status.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Volume</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Volume</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Volume.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['ext'] && !(typeof data['ext'] === 'string' || data['ext'] instanceof String)) {
            throw new Error("Expected the field `ext` to be a primitive type in the JSON string but got " + data['ext']);
        }
        // ensure the json data is a string
        if (data['mount'] && !(typeof data['mount'] === 'string' || data['mount'] instanceof String)) {
            throw new Error("Expected the field `mount` to be a primitive type in the JSON string but got " + data['mount']);
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }

        return true;
    }


}

Volume.RequiredProperties = ["name", "ext", "mount", "status", "created"];

/**
 * @member {String} name
 */
Volume.prototype['name'] = undefined;

/**
 * @member {String} ext
 */
Volume.prototype['ext'] = undefined;

/**
 * @member {String} mount
 */
Volume.prototype['mount'] = undefined;

/**
 * @member {module:model/Status} status
 */
Volume.prototype['status'] = undefined;

/**
 * @member {Date} created
 */
Volume.prototype['created'] = undefined;

/**
 * @member {Number} size
 */
Volume.prototype['size'] = undefined;

/**
 * @member {String} error
 */
Volume.prototype['error'] = undefined;






export default Volume;

