/**
 * Bckupr
 * Bckupr API
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Filters model module.
 * @module model/Filters
 * @version latest
 */
class Filters {
    /**
     * Constructs a new <code>Filters</code>.
     * @alias module:model/Filters
     * @param includeNames {Array.<String>} 
     * @param includeVolumes {Array.<String>} 
     * @param excludeNames {Array.<String>} 
     * @param excludeVolumes {Array.<String>} 
     */
    constructor(includeNames, includeVolumes, excludeNames, excludeVolumes) { 
        
        Filters.initialize(this, includeNames, includeVolumes, excludeNames, excludeVolumes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, includeNames, includeVolumes, excludeNames, excludeVolumes) { 
        obj['include_names'] = includeNames;
        obj['include_volumes'] = includeVolumes;
        obj['exclude_names'] = excludeNames;
        obj['exclude_volumes'] = excludeVolumes;
    }

    /**
     * Constructs a <code>Filters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Filters} obj Optional instance to populate.
     * @return {module:model/Filters} The populated <code>Filters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Filters();

            if (data.hasOwnProperty('include_names')) {
                obj['include_names'] = ApiClient.convertToType(data['include_names'], ['String']);
            }
            if (data.hasOwnProperty('include_volumes')) {
                obj['include_volumes'] = ApiClient.convertToType(data['include_volumes'], ['String']);
            }
            if (data.hasOwnProperty('exclude_names')) {
                obj['exclude_names'] = ApiClient.convertToType(data['exclude_names'], ['String']);
            }
            if (data.hasOwnProperty('exclude_volumes')) {
                obj['exclude_volumes'] = ApiClient.convertToType(data['exclude_volumes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Filters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Filters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Filters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['include_names'])) {
            throw new Error("Expected the field `include_names` to be an array in the JSON data but got " + data['include_names']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['include_volumes'])) {
            throw new Error("Expected the field `include_volumes` to be an array in the JSON data but got " + data['include_volumes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['exclude_names'])) {
            throw new Error("Expected the field `exclude_names` to be an array in the JSON data but got " + data['exclude_names']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['exclude_volumes'])) {
            throw new Error("Expected the field `exclude_volumes` to be an array in the JSON data but got " + data['exclude_volumes']);
        }

        return true;
    }


}

Filters.RequiredProperties = ["include_names", "include_volumes", "exclude_names", "exclude_volumes"];

/**
 * @member {Array.<String>} include_names
 */
Filters.prototype['include_names'] = undefined;

/**
 * @member {Array.<String>} include_volumes
 */
Filters.prototype['include_volumes'] = undefined;

/**
 * @member {Array.<String>} exclude_names
 */
Filters.prototype['exclude_names'] = undefined;

/**
 * @member {Array.<String>} exclude_volumes
 */
Filters.prototype['exclude_volumes'] = undefined;






export default Filters;

