/**
 * Bckupr
 * Bckupr API
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Backup from '../model/Backup';
import Error from '../model/Error';
import Restore from '../model/Restore';
import Rotate from '../model/Rotate';
import RotateInput from '../model/RotateInput';
import TaskInput from '../model/TaskInput';

/**
* Backup service.
* @module api/BackupApi
* @version latest
*/
export default class BackupApi {

    /**
    * Constructs a new BackupApi. 
    * @alias module:api/BackupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteBackup operation.
     * @callback module:api/BackupApi~deleteBackupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes backup
     * @param {String} id backup id
     * @param {module:api/BackupApi~deleteBackupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBackup(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBackup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/backups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBackup operation.
     * @callback module:api/BackupApi~getBackupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Backup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets backup by id
     * @param {String} id backup id
     * @param {module:api/BackupApi~getBackupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Backup}
     */
    getBackup(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBackup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Backup;
      return this.apiClient.callApi(
        '/api/backups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRestore operation.
     * @callback module:api/BackupApi~getRestoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Restore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id backup id
     * @param {module:api/BackupApi~getRestoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Restore}
     */
    getRestore(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRestore");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Restore;
      return this.apiClient.callApi(
        '/api/backups/{id}/restore', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRotate operation.
     * @callback module:api/BackupApi~getRotateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rotate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/BackupApi~getRotateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rotate}
     */
    getRotate(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Rotate;
      return this.apiClient.callApi(
        '/api/rotate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBackups operation.
     * @callback module:api/BackupApi~listBackupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Backup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/BackupApi~listBackupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Backup>}
     */
    listBackups(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Backup];
      return this.apiClient.callApi(
        '/api/backups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startBackup operation.
     * @callback module:api/BackupApi~startBackupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Backup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new backup
     * @param {module:model/TaskInput} taskInput Backup to be created
     * @param {module:api/BackupApi~startBackupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Backup}
     */
    startBackup(taskInput, callback) {
      let postBody = taskInput;
      // verify the required parameter 'taskInput' is set
      if (taskInput === undefined || taskInput === null) {
        throw new Error("Missing the required parameter 'taskInput' when calling startBackup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Backup;
      return this.apiClient.callApi(
        '/api/backups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startBackupWithId operation.
     * @callback module:api/BackupApi~startBackupWithIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Backup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id backup id
     * @param {Object} opts Optional parameters
     * @param {module:model/TaskInput} [taskInput] Backup to be created
     * @param {module:api/BackupApi~startBackupWithIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Backup}
     */
    startBackupWithId(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['taskInput'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling startBackupWithId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Backup;
      return this.apiClient.callApi(
        '/api/backups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startRestore operation.
     * @callback module:api/BackupApi~startRestoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Restore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id backup id
     * @param {module:model/TaskInput} taskInput Backup to be created
     * @param {module:api/BackupApi~startRestoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Restore}
     */
    startRestore(id, taskInput, callback) {
      let postBody = taskInput;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling startRestore");
      }
      // verify the required parameter 'taskInput' is set
      if (taskInput === undefined || taskInput === null) {
        throw new Error("Missing the required parameter 'taskInput' when calling startRestore");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Restore;
      return this.apiClient.callApi(
        '/api/backups/{id}/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startRotate operation.
     * @callback module:api/BackupApi~startRotateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rotate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves application version
     * @param {Object} opts Optional parameters
     * @param {module:model/RotateInput} [rotateInput] Backup to be created
     * @param {module:api/BackupApi~startRotateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rotate}
     */
    startRotate(opts, callback) {
      opts = opts || {};
      let postBody = opts['rotateInput'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Rotate;
      return this.apiClient.callApi(
        '/api/rotate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
