/* tslint:disable */
/* eslint-disable */
/**
 * Bckupr
 * Bckupr API
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Backup,
  Restore,
  Rotate,
  RotateInput,
  TaskInput,
} from '../models/index';
import {
    BackupFromJSON,
    BackupToJSON,
    RestoreFromJSON,
    RestoreToJSON,
    RotateFromJSON,
    RotateToJSON,
    RotateInputFromJSON,
    RotateInputToJSON,
    TaskInputFromJSON,
    TaskInputToJSON,
} from '../models/index';

export interface DeleteBackupRequest {
    id: string;
}

export interface GetBackupRequest {
    id: string;
}

export interface GetRestoreRequest {
    id: string;
}

export interface StartBackupRequest {
    taskInput: TaskInput;
}

export interface StartBackupWithIdRequest {
    id: string;
    taskInput?: TaskInput;
}

export interface StartRestoreRequest {
    id: string;
    taskInput: TaskInput;
}

export interface StartRotateRequest {
    rotateInput?: RotateInput;
}

/**
 * 
 */
export class BackupApi extends runtime.BaseAPI {

    /**
     * Deletes backup
     */
    async deleteBackupRaw(requestParameters: DeleteBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteBackup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/backups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes backup
     */
    async deleteBackup(requestParameters: DeleteBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBackupRaw(requestParameters, initOverrides);
    }

    /**
     * Gets backup by id
     */
    async getBackupRaw(requestParameters: GetBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Backup>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getBackup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/backups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BackupFromJSON(jsonValue));
    }

    /**
     * Gets backup by id
     */
    async getBackup(requestParameters: GetBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Backup> {
        const response = await this.getBackupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRestoreRaw(requestParameters: GetRestoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Restore>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRestore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/backups/{id}/restore`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RestoreFromJSON(jsonValue));
    }

    /**
     */
    async getRestore(requestParameters: GetRestoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Restore> {
        const response = await this.getRestoreRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRotateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rotate>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rotate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RotateFromJSON(jsonValue));
    }

    /**
     */
    async getRotate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rotate> {
        const response = await this.getRotateRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async listBackupsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Backup>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/backups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BackupFromJSON));
    }

    /**
     */
    async listBackups(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Backup>> {
        const response = await this.listBackupsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Creates new backup
     */
    async startBackupRaw(requestParameters: StartBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Backup>> {
        if (requestParameters['taskInput'] == null) {
            throw new runtime.RequiredError(
                'taskInput',
                'Required parameter "taskInput" was null or undefined when calling startBackup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/backups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskInputToJSON(requestParameters['taskInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BackupFromJSON(jsonValue));
    }

    /**
     * Creates new backup
     */
    async startBackup(requestParameters: StartBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Backup> {
        const response = await this.startBackupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async startBackupWithIdRaw(requestParameters: StartBackupWithIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Backup>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling startBackupWithId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/backups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaskInputToJSON(requestParameters['taskInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BackupFromJSON(jsonValue));
    }

    /**
     */
    async startBackupWithId(requestParameters: StartBackupWithIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Backup> {
        const response = await this.startBackupWithIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async startRestoreRaw(requestParameters: StartRestoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Restore>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling startRestore().'
            );
        }

        if (requestParameters['taskInput'] == null) {
            throw new runtime.RequiredError(
                'taskInput',
                'Required parameter "taskInput" was null or undefined when calling startRestore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/backups/{id}/restore`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskInputToJSON(requestParameters['taskInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RestoreFromJSON(jsonValue));
    }

    /**
     */
    async startRestore(requestParameters: StartRestoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Restore> {
        const response = await this.startRestoreRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves application version
     */
    async startRotateRaw(requestParameters: StartRotateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rotate>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rotate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RotateInputToJSON(requestParameters['rotateInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RotateFromJSON(jsonValue));
    }

    /**
     * Retrieves application version
     */
    async startRotate(requestParameters: StartRotateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rotate> {
        const response = await this.startRotateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
