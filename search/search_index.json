{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"Bckupr  <p> Bckupr is program to automate backup creation and data restoration. </p> <p> This tool reads docker labels to determine which volumes/mounts require backing up, cleanly stopping containers and their dependancies to make sure all data is flushed to disk to create consistent backups. </p>"},{"location":"#quick_start","title":"Quick Start","text":"<p>Using Bckupr you can automate local backups, pushing to offsite storage and data rentention with simple commands to also automate restoring your data. </p> <p>Bckupr will read container labels to tell which volumes should be backed up before shutting down relavent containers and performing backups to ensure all data is flushed to disk avoiding corrupt backups.</p> <p>To get started simple tag your containers with the volume to backup using <code>bckupr.volumes=&lt;volume-name&gt;</code>.</p> <p>Next run Bckupr using the following docker commands:</p> docker rundocker-compose.yml <p>Use the following docker run command to start bckupr: <pre><code>$ docker run --name bckupr -d \\\n    -p 8000:8000 \\\n    -v /tmp/backups:/backups \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    sbnarra/bckupr\n</code></pre> Create new ad-hoc backup: <pre><code>$ docker exec bckupr backup\n</code></pre> To then restore from the adhoc backup: <pre><code>$ docker exec bckupr restore --backup-id &lt;id-from-backup-logs&gt;\n</code></pre></p> <p>Use the following YAML to run bckupr: <pre><code>version: \"3\"\nservices:\n  bckupr:\n    image: sbnarra/bckupr\n    ports:\n      - 8000:8000\n    volumes:\n      - /tmp/backups:/backups\n      - /var/run/docker.sock:/var/run/docker.sock\n</code></pre> Create new ad-hoc backup: <pre><code>$ docker compose bckupr exec backup\n</code></pre> To then restore from the adhoc backup: <pre><code>$ docker compose bckupr exec restore --backup-id &lt;id-from-backup-logs&gt;\n</code></pre></p> <p>By default bckupr runs in dry run mode, to disable use arg <code>--dry-run false</code> or env <code>DRY_RUN=false</code> once testing is complete.</p> <p>Don't forget to update <code>/tmp/backups</code> to backup archieve.</p>"},{"location":"labels/","title":"Labels","text":"<p>Docker labels are used to configure which volumes are backed up alone with additional behaviour.</p> <p>Bckupr will read the labels of all containers so if a container has crashed or exited, its labels will still be read. If volumes for short lived containers need backing up, you should label the bckupr contanier.</p>"},{"location":"labels/#options","title":"Options","text":"<ul> <li><code>bckupr.volumes=named_vol_1,named_vol_2</code></li> </ul> <p>Named volumes can configured using the above label with a comma separated list.</p> <ul> <li><code>bckupr.volumes.&lt;alias&gt;=/path/to/volume/mount</code></li> </ul> <p>Mounted volumes require an alias so should be configured using the label above per-mount.</p> <ul> <li><code>bckupr.stop=true|false</code></li> </ul> <p>By default bckupr will stop all containers, and their dependancies, with write access using <code>stop modes</code>. If this behaviour is change, the above label can be used to tell bckupr to always shutdown the container.</p>"},{"location":"labels/#prefix","title":"Prefix","text":"<p>The label prefix <code>bckupr</code> can be changed, this may be useful if running multiple instances. E.g. running bckupr with <code>--label-prefix=custom</code> will result it in scanning for labels like <code>custom.volumes=</code>.</p> Env Flag Description <code>LABEL_PREFIX</code> <code>--label-prefix</code> Label prefix for scanning containers Optional: <code>bckupr</code>"},{"location":"metrics/","title":"Metrics","text":"<p>Future Work: Use backup/restore specific metrics</p> <p>Bckupr can export metrics via the <code>/metrics</code> endpoint to be scrapped by prometheus.</p> Env Flag Description Default <code>METRICS_ENABLED</code> <code>--metrics-enabled</code> Enables <code>/metrics</code> endpoint Optional: Defaults <code>false</code>"},{"location":"metrics/#backup","title":"Backup","text":"<ul> <li><code>backup_duration_seconds</code></li> <li><code>backup_success_total</code><ul> <li><code>id</code>: backup id</li> <li><code>volume</code>: volume path</li> </ul> </li> <li><code>backup_error_total</code><ul> <li><code>id</code>: backup id</li> <li><code>volume</code>: volume path</li> <li><code>error</code>: error message</li> </ul> </li> </ul>"},{"location":"metrics/#restore","title":"Restore","text":"<ul> <li><code>restore_duration_seconds</code></li> <li><code>restore_success_total</code><ul> <li><code>id</code>: backup id</li> <li><code>volume</code>: volume path</li> </ul> </li> <li><code>restore_error_total</code><ul> <li><code>id</code>: backup id</li> <li><code>volume</code>: volume path</li> <li><code>error</code>: error message</li> </ul> </li> </ul>"},{"location":"notifications/","title":"Notifications","text":"<p>Notifications can be enabled via bckuprs Shoutrrr intergration.</p>"},{"location":"notifications/#configuration","title":"Configuration","text":"<p>Set the option below to configure notifications, see the shoutrrr documentation on how to configure your services.</p> Env Flag Description Default <code>NOTIFICATION_URLS</code> <code>--notification-urls</code> Comma separated list of service urls Optional: Defaults none"},{"location":"notifications/#tuning","title":"Tuning","text":"<p>By default bckupr will send notifications for all backup/restore jobs that are started/completed and notifications per-volume. The flags below can be used to tune which notifications you recieve.</p> Env Flag Description Default <code>NOTIFY_JOB_STARTED</code> <code>--notify-job-started</code> Notify when backup/restore starts Optional: Defaults <code>true</code> <code>NOTIFY_JOB_COMPLETED</code> <code>--notify-job-completed</code> Notify when backup/restore completes(success &amp; error) Optional: Defaults <code>true</code> <code>NOTIFY_JOB_ERROR</code> <code>--notify-job-error</code> Notify when backup/restore errors Optional: Defaults <code>true</code> <code>NOTIFY_TASK_STARTED</code> <code>--notify-task-started</code> Notify when volume backup/restore starts Optional: Defaults <code>true</code> <code>NOTIFY_TASK_COMPLETED</code> <code>--notify-task-completed</code> Notify when volume backup/restore completes(success &amp; error) Optional: Defaults <code>true</code> <code>NOTIFY_TASK_ERROR</code> <code>--notify-task-error</code> Notify when volume backup/restore errors Optional: Defaults <code>true</code>"},{"location":"offsite/","title":"Offsite","text":"<p>Bckupr can push backups offsite to any storage option using custom docker containers and then pull those backups if deleted locally.</p> <p>These can be defined with YAML and mounted into the bckupr container. Bckupr also comes with predefined config:</p> <ul> <li>AWS - <code>/offsite/aws-s3.yml</code></li> </ul> <p>Each integration will require environment variables sets in the bckupr container which will be passed into the offsite container during backup pushes or restore pulls.</p>"},{"location":"offsite/#configure","title":"Configure","text":"Env Flag Description Default <code>OFFSITE_CONTAINERS</code> <code>--offsite-containers</code> Path to config file Optional: Defaults none"},{"location":"offsite/#predefined","title":"Predefined","text":""},{"location":"offsite/#scp","title":"SCP","text":"<ul> <li><code>OFFSITE_CONFIG=/offsite/scp.yml</code></li> </ul> <p>Requires the environment variables:</p> <ul> <li><code>HOSTNAME</code></li> <li><code>SSH_DIR</code></li> </ul>"},{"location":"offsite/#aws_s3","title":"AWS S3","text":"<ul> <li><code>OFFSITE_CONFIG=/offsite/aws-s3.yml</code></li> </ul> <p>Requires the environment variables:</p> <ul> <li><code>SECRET_KEY</code></li> <li><code>REGION</code></li> <li><code>BUCKET</code></li> </ul>"},{"location":"offsite/#custom","title":"Custom","text":"<p>Configuration to push/pull from any offsite storage can be defined using the template below:</p> <pre><code>push:\n  image: ubuntu\n  cmd:\n    - sh\n    - -c\n    - scp $BACKUP_PATH $USERNAME@$HOSTNAME:/backups/$BACKUP_ID/$VOLUME_NAME$EXT\n  env:\n    - USERNAME\n    - HOSTNAME\npull:\n  image: ubuntu\n  cmd:\n    - sh\n    - -c\n    - scp $USERNAME@$HOSTNAME:/backups $BACKUP_PATH\n  env:\n    - USERNAME\n    - HOSTNAME\n</code></pre> <p><code>image</code>: image to be used.</p> <p><code>cmd</code>: the command is made up of a list of arguments.</p> <p><code>env</code>: this is a list of environment variable names to be passed from the bckupr container into the offsite containers.</p> <p>Mount the file into the bckupr container and pass the flag <code>--offsite-containers=/path/to/file.yml</code></p>"},{"location":"usage/","title":"Usage","text":"<p>Bckupr is designed to run as a daemon process using the <code>daemon</code> command.</p> <p>Once started you can then run the <code>backup</code>, <code>restore</code>, <code>list</code>, <code>delete</code> and <code>rotate</code> cli commands or use the UI to execute the same functionality.</p>"},{"location":"command/backup/","title":"Backup","text":"<p>The <code>backup</code> command executes the following process:</p> <ol> <li>read container labels to determine volumes to backup, see labels</li> <li>stop containers based on stop modes</li> <li>run docker containers to backup each volume into the backup archive within the backup id</li> <li>start containers as each volumes backup completes</li> <li>optionally push completed backup offsite, see offsite</li> </ol> Env Flag Description <code>BACKUP_ID</code> <code>--backup-id</code> Id of specific backup Optional: Autogenerate Timestamp <code>DRY_RUN</code> <code>--dry-run</code> Needs disabling once completed testing Optional: Defaults <code>true</code> <code>STOP_MODES</code> <code>--stop-modes</code> See stop modes for more info Optional: Defaults <code>labelled,writers,linked</code>"},{"location":"command/backup/#stop_modes","title":"Stop Modes","text":"<p>Stop modes control how bckupr stops containers before running backups or restores.</p> <p><code>all</code> - Will stop all running containers on the docker host</p> <p><code>labelled</code> - Will stop containers labelled with <code>bckupr.stop</code>, see Labels for more info.</p> <p><code>writers</code> - Will stop all containers with RW access to the volume.</p> <p><code>attached</code> - Will stop all containers with the volume attached.</p> <p><code>linked</code> - Will stop dependant containers of those targeted from <code>labelled</code>, <code>wrtiers</code> or <code>attached</code> (this option alone has no effect).</p>"},{"location":"command/backup/#filters","title":"Filters","text":"<p>Filters can be applied to limit which containers/volumes are included with the task.</p> Env Flag Default <code>INCLUDE_NAMES</code> <code>--include-names</code> Optional: Defaults none <code>INCLUDE_VOLUMES</code> <code>--include-volumes</code> Optional: Defaults none <code>EXCLUDE_NAMES</code> <code>--exlclude-names</code> Optional: Defaults none <code>EXCLUDE_VOLUMES</code> <code>--exlclude-volumes</code> Optional: Defaults none"},{"location":"command/cron/","title":"Cron","text":"<p>The <code>cron</code> command automates the <code>backup</code> and <code>rotate</code> commands using cron expressions.</p>"},{"location":"command/cron/#backup","title":"Backup","text":"<p>By default the backup schedule is enabled with <code>0 0 * * *</code>, daily backups at midnight.</p> Env Flag Description Default <code>BACKUP_SCHEDULE</code> <code>--backup-schedule</code> Sets schedule for automatic backup creation, set to \"\" to disable Optional: Defaults <code>0 0 * * *</code> <p>See the <code>backup</code> command on how to configure backups.</p>"},{"location":"command/cron/#rotate","title":"Rotate","text":"<p>By default the rotate schedule is disabled.</p> Env Flag Description Default <code>ROTATE_SCHEDULE</code> <code>--rotate-schedule</code> Sets schedule for automatic backup rotation, set to \"\" to disable Optional: Defaults none <p>See the <code>rotate</code> command on how to configure backup rotations.</p>"},{"location":"command/daemon/","title":"Daemon","text":"<p>The <code>daemon</code> command is a long running task that should be used to start bckupr as a background service. You can then use the <code>backup</code>, <code>restore</code>, <code>rotate</code>, <code>list</code>, and <code>delete</code> commands or use the UI on http://localhost:8000.</p> <p>This also runs the builtin cron scheduler to automate executing the <code>backup</code> and <code>rotate</code> commands. To run bckupr as only a cron instance see the <code>cron</code> command.</p> Env Flag Description <code>BACKUP_DIR</code> <code>--backup-dir</code> Directory containing local backups Required: Must be supplied <code>UNIX_SOCKET</code> <code>--unix-socket</code> Path to bckupr unix socket, used by cli commands Optional: Defaults <code>.bckupr.sock</code> <code>TCP_ADDR</code> <code>--tcp-addr</code> Tcp bind address Optional: Defaults <code>0.0.0.0:8000</code> <code>EXPOSE_API</code> <code>--expose-api</code> Exposes API via TCP for external access Optional: Defaults <code>false</code> <code>UI_ENABLED</code> <code>--ui-enabled</code> Enables bckupr GUI Optional: Defaults <code>true</code> <code>METRICS_ENABLED</code> <code>--metrics-enabled</code> Enables metrics, see metrics for more info Optional: Defaults <code>false</code> <p>This command also accepts the <code>cron</code>, <code>backup</code> and <code>rotate</code> options.</p>"},{"location":"command/delete/","title":"Delete","text":"<p>The <code>delete</code> command permanently removes a local backup from disk (this doesn't remove offsite backups).</p> Env Flag Description <code>BACKUP_ID</code> <code>--backup-id</code> Id of specific backup Required: Must be supplied <code>DRY_RUN</code> <code>--dry-run</code> Needs disabling once completed testing Optional: Defaults <code>true</code>"},{"location":"command/list/","title":"List","text":"<p>The <code>list</code> command displays all backups with details, include creation date/time, volumes and corresponding sizes.</p>"},{"location":"command/restore/","title":"Restore","text":"<p>The <code>restore</code> command requires a valid <code>backup-id</code> and executes the following process:</p> <ol> <li>check backup exists locally<ul> <li>if not found, optionally pull backup from offsite, see offsite</li> </ul> </li> <li>stop containers based on stop modes</li> <li>run docker containers to restore each volume from the backup archive within the supplied backup id</li> <li>start containers as each volumes restore completes</li> </ol> Env Flag Description <code>BACKUP_ID</code> <code>--backup-id</code> Id of specific backup Required: Must be supplied <code>DRY_RUN</code> <code>--dry-run</code> Needs disabling once completed testing Optional: Defaults <code>true</code> <code>STOP_MODES</code> <code>--stop-modes</code> See stop modes for more info Optional: Defaults <code>labelled,attached,linked</code>"},{"location":"command/restore/#stop_modes","title":"Stop Modes","text":"<p>Stop modes control how bckupr stops containers before running backups or restores.</p> <p><code>all</code> - Will stop all running containers on the docker host</p> <p><code>labelled</code> - Will stop containers labelled with <code>bckupr.stop</code>, see Labels for more info.</p> <p><code>writers</code> - Will stop all containers with RW access to the volume.</p> <p><code>attached</code> - Will stop all containers with the volume attached.</p> <p><code>linked</code> - Will stop dependant containers of those targeted from <code>labelled</code>, <code>wrtiers</code> or <code>attached</code> (this option alone has no effect).</p>"},{"location":"command/restore/#filters","title":"Filters","text":"<p>Filters can be applied to limit which containers/volumes are included with the task.</p> Env Flag Default <code>INCLUDE_NAMES</code> <code>--include-names</code> Optional: Defaults none <code>INCLUDE_VOLUMES</code> <code>--include-volumes</code> Optional: Defaults none <code>EXCLUDE_NAMES</code> <code>--exlclude-names</code> Optional: Defaults none <code>EXCLUDE_VOLUMES</code> <code>--exlclude-volumes</code> Optional: Defaults none"},{"location":"command/rotate/","title":"Rotate","text":"<p>The <code>rotate</code> command is used to clean up old backups. You configure policies which define how many backups to retain for a period of time. These are then moved into a bin directory or simply deleted from disk (has no affect on offsite backups).</p> Env Flag Description <code>DRY_RUN</code> <code>--dry-run</code> Needs disabling once completed testing Optional: Defaults <code>true</code> <code>DESTROY_BACKUPS</code> <code>--destroy-backups</code> Backups are removed from disk rather than moved to bin Optional: Defaults <code>false</code>"},{"location":"command/rotate/#modes","title":"Modes","text":"<p>By default <code>rotate</code> runs in the dry run mode, it's highly recommended to test your policies throughly using dry runs. Once testing is finished use the <code>DRY_RUN=false</code>/<code>--dry-run=false</code> option.</p> <p>Once dry runs are disabled, <code>rotate</code> won't delete backups but move them into a bin directory within the backups archive directory, this directory needs emptying manually. To skip the <code>bin</code> directory and automatically delete backups you need to supply the <code>DESTROY_BACKUPS=true</code>/<code>--destroy-backups=true</code> option.</p>"},{"location":"command/rotate/#policies","title":"Policies","text":"<p>Example policies configuration: <pre><code>policies:\n  # policy for last 24 hours\n  - period:\n      from: -1d\n      to: 0s\n    keep: 1\n  # policy for last week\n  - period:\n      from: -7d\n      to: -1d\n    keep: 1\n  # final catch all\n  - period:\n      from: -999w\n      to: -7d\n    keep: -1\n</code></pre></p> <p>This configuration will:</p> <ol> <li>keep the most recent backup in the last 24 hours<ul> <li>all other backups created within the 24 hour window are removed</li> </ul> </li> <li>keep the most recent backup in the last 6 days</li> <li>these 2 policies covers the last week, specifify daily limit and weekly limit. Notice the 2nd policy doesn't overlap with the 1st</li> <li>final catch all policy will keep the oldest backup using a negative keep</li> <li>careful keep oldest as you'll be removing newest (should move this example in the 1st policy)</li> </ol>"}]}