/*
Bckupr

Bckupr API Specification

API version: latest
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Task type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Task{}

// Task struct for Task
type Task struct {
	LabelPrefix string `json:"label_prefix"`
	StopModes []string `json:"stop_modes"`
	Other []string `json:"other"`
}

type _Task Task

// NewTask instantiates a new Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTask(labelPrefix string, stopModes []string, other []string) *Task {
	this := Task{}
	this.LabelPrefix = labelPrefix
	this.StopModes = stopModes
	this.Other = other
	return &this
}

// NewTaskWithDefaults instantiates a new Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskWithDefaults() *Task {
	this := Task{}
	var labelPrefix string = "bckupr"
	this.LabelPrefix = labelPrefix
	return &this
}

// GetLabelPrefix returns the LabelPrefix field value
func (o *Task) GetLabelPrefix() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LabelPrefix
}

// GetLabelPrefixOk returns a tuple with the LabelPrefix field value
// and a boolean to check if the value has been set.
func (o *Task) GetLabelPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LabelPrefix, true
}

// SetLabelPrefix sets field value
func (o *Task) SetLabelPrefix(v string) {
	o.LabelPrefix = v
}

// GetStopModes returns the StopModes field value
func (o *Task) GetStopModes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.StopModes
}

// GetStopModesOk returns a tuple with the StopModes field value
// and a boolean to check if the value has been set.
func (o *Task) GetStopModesOk() (*[]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StopModes, true
}

// SetStopModes sets field value
func (o *Task) SetStopModes(v []string) {
	o.StopModes = v
}

// GetOther returns the Other field value
func (o *Task) GetOther() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Other
}

// GetOtherOk returns a tuple with the Other field value
// and a boolean to check if the value has been set.
func (o *Task) GetOtherOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Other, true
}

// SetOther sets field value
func (o *Task) SetOther(v []string) {
	o.Other = v
}

func (o Task) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Task) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label_prefix"] = o.LabelPrefix
	toSerialize["stop_modes"] = o.StopModes
	toSerialize["other"] = o.Other
	return toSerialize, nil
}

func (o *Task) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label_prefix",
		"stop_modes",
		"other",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTask := _Task{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTask)

	if err != nil {
		return err
	}

	*o = Task(varTask)

	return err
}

type NullableTask struct {
	value *Task
	isSet bool
}

func (v NullableTask) Get() *Task {
	return v.value
}

func (v *NullableTask) Set(val *Task) {
	v.value = val
	v.isSet = true
}

func (v NullableTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTask(val *Task) *NullableTask {
	return &NullableTask{value: val, isSet: true}
}

func (v NullableTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


