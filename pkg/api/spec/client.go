// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for StopModes.
const (
	All      StopModes = "all"
	Attached StopModes = "attached"
	Labelled StopModes = "labelled"
	Linked   StopModes = "linked"
	Writers  StopModes = "writers"
)

// Defines values for TaskStatus.
const (
	TaskStatusCompleted TaskStatus = "completed"
	TaskStatusError     TaskStatus = "error"
	TaskStatusPending   TaskStatus = "pending"
)

// Backup defines model for Backup.
type Backup struct {
	Created time.Time `json:"created"`
	Id      string    `json:"id"`
	Type    string    `json:"type"`
	Volumes []Volume  `json:"volumes"`
	union   json.RawMessage
}

// BackupTrigger defines model for BackupTrigger.
type BackupTrigger struct {
	union json.RawMessage
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// Filters defines model for Filters.
type Filters struct {
	ExcludeNames   []string `json:"exclude_names"`
	ExcludeVolumes []string `json:"exclude_volumes"`
	IncludeNames   []string `json:"include_names"`
	IncludeVolumes []string `json:"include_volumes"`
}

// RestoreTrigger defines model for RestoreTrigger.
type RestoreTrigger struct {
	Dummy *string `json:"dummy,omitempty"`
	union json.RawMessage
}

// RotateTrigger defines model for RotateTrigger.
type RotateTrigger struct {
	Destroy      bool   `json:"destroy"`
	PoliciesPath string `json:"policies_path"`
}

// StopModes defines model for StopModes.
type StopModes string

// Task defines model for Task.
type Task struct {
	Created time.Time  `json:"created"`
	Status  TaskStatus `json:"status"`
}

// TaskStatus defines model for Task.Status.
type TaskStatus string

// TaskTrigger defines model for TaskTrigger.
type TaskTrigger struct {
	Filters     Filters      `json:"filters"`
	LabelPrefix *string      `json:"label_prefix,omitempty"`
	StopModes   *[]StopModes `json:"stop_modes,omitempty"`
}

// Version defines model for Version.
type Version struct {
	Created string `json:"created"`
	Version string `json:"version"`
}

// Volume defines model for Volume.
type Volume struct {
	Created time.Time `json:"created"`
	Error   string    `json:"error"`
	Ext     string    `json:"ext"`
	Mount   string    `json:"mount"`
	Name    string    `json:"name"`
	Size    int64     `json:"size"`
}

// Backups defines model for Backups.
type Backups = []Backup

// NotFound defines model for NotFound.
type NotFound = Error

// TriggerBackupJSONRequestBody defines body for TriggerBackup for application/json ContentType.
type TriggerBackupJSONRequestBody = BackupTrigger

// TriggerBackupWithIdJSONRequestBody defines body for TriggerBackupWithId for application/json ContentType.
type TriggerBackupWithIdJSONRequestBody = BackupTrigger

// TriggerRestoreJSONRequestBody defines body for TriggerRestore for application/json ContentType.
type TriggerRestoreJSONRequestBody = RestoreTrigger

// RotateBackupsJSONRequestBody defines body for RotateBackups for application/json ContentType.
type RotateBackupsJSONRequestBody = RotateTrigger

// AsTask returns the union data inside the Backup as a Task
func (t Backup) AsTask() (Task, error) {
	var body Task
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTask overwrites any union data inside the Backup as the provided Task
func (t *Backup) FromTask(v Task) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTask performs a merge with any union data inside the Backup, using the provided Task
func (t *Backup) MergeTask(v Task) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Backup) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["created"], err = json.Marshal(t.Created)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'created': %w", err)
	}

	object["id"], err = json.Marshal(t.Id)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id': %w", err)
	}

	object["type"], err = json.Marshal(t.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	object["volumes"], err = json.Marshal(t.Volumes)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'volumes': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *Backup) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["created"]; found {
		err = json.Unmarshal(raw, &t.Created)
		if err != nil {
			return fmt.Errorf("error reading 'created': %w", err)
		}
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &t.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	if raw, found := object["volumes"]; found {
		err = json.Unmarshal(raw, &t.Volumes)
		if err != nil {
			return fmt.Errorf("error reading 'volumes': %w", err)
		}
	}

	return err
}

// AsTaskTrigger returns the union data inside the BackupTrigger as a TaskTrigger
func (t BackupTrigger) AsTaskTrigger() (TaskTrigger, error) {
	var body TaskTrigger
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskTrigger overwrites any union data inside the BackupTrigger as the provided TaskTrigger
func (t *BackupTrigger) FromTaskTrigger(v TaskTrigger) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskTrigger performs a merge with any union data inside the BackupTrigger, using the provided TaskTrigger
func (t *BackupTrigger) MergeTaskTrigger(v TaskTrigger) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BackupTrigger) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BackupTrigger) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTaskTrigger returns the union data inside the RestoreTrigger as a TaskTrigger
func (t RestoreTrigger) AsTaskTrigger() (TaskTrigger, error) {
	var body TaskTrigger
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTaskTrigger overwrites any union data inside the RestoreTrigger as the provided TaskTrigger
func (t *RestoreTrigger) FromTaskTrigger(v TaskTrigger) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTaskTrigger performs a merge with any union data inside the RestoreTrigger, using the provided TaskTrigger
func (t *RestoreTrigger) MergeTaskTrigger(v TaskTrigger) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RestoreTrigger) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Dummy != nil {
		object["dummy"], err = json.Marshal(t.Dummy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'dummy': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *RestoreTrigger) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["dummy"]; found {
		err = json.Unmarshal(raw, &t.Dummy)
		if err != nil {
			return fmt.Errorf("error reading 'dummy': %w", err)
		}
	}

	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListBackups request
	ListBackups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TriggerBackupWithBody request with any body
	TriggerBackupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TriggerBackup(ctx context.Context, body TriggerBackupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBackup request
	DeleteBackup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBackup request
	GetBackup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TriggerBackupWithIdWithBody request with any body
	TriggerBackupWithIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TriggerBackupWithId(ctx context.Context, id string, body TriggerBackupWithIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TriggerRestoreWithBody request with any body
	TriggerRestoreWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TriggerRestore(ctx context.Context, id string, body TriggerRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RotateBackupsWithBody request with any body
	RotateBackupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RotateBackups(ctx context.Context, body RotateBackupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListBackups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBackupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TriggerBackupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTriggerBackupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TriggerBackup(ctx context.Context, body TriggerBackupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTriggerBackupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBackup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBackupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBackup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBackupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TriggerBackupWithIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTriggerBackupWithIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TriggerBackupWithId(ctx context.Context, id string, body TriggerBackupWithIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTriggerBackupWithIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TriggerRestoreWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTriggerRestoreRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TriggerRestore(ctx context.Context, id string, body TriggerRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTriggerRestoreRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RotateBackupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRotateBackupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RotateBackups(ctx context.Context, body RotateBackupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRotateBackupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListBackupsRequest generates requests for ListBackups
func NewListBackupsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTriggerBackupRequest calls the generic TriggerBackup builder with application/json body
func NewTriggerBackupRequest(server string, body TriggerBackupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTriggerBackupRequestWithBody(server, "application/json", bodyReader)
}

// NewTriggerBackupRequestWithBody generates requests for TriggerBackup with any type of body
func NewTriggerBackupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBackupRequest generates requests for DeleteBackup
func NewDeleteBackupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBackupRequest generates requests for GetBackup
func NewGetBackupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTriggerBackupWithIdRequest calls the generic TriggerBackupWithId builder with application/json body
func NewTriggerBackupWithIdRequest(server string, id string, body TriggerBackupWithIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTriggerBackupWithIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTriggerBackupWithIdRequestWithBody generates requests for TriggerBackupWithId with any type of body
func NewTriggerBackupWithIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTriggerRestoreRequest calls the generic TriggerRestore builder with application/json body
func NewTriggerRestoreRequest(server string, id string, body TriggerRestoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTriggerRestoreRequestWithBody(server, id, "application/json", bodyReader)
}

// NewTriggerRestoreRequestWithBody generates requests for TriggerRestore with any type of body
func NewTriggerRestoreRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backups/%s/restore", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRotateBackupsRequest calls the generic RotateBackups builder with application/json body
func NewRotateBackupsRequest(server string, body RotateBackupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRotateBackupsRequestWithBody(server, "application/json", bodyReader)
}

// NewRotateBackupsRequestWithBody generates requests for RotateBackups with any type of body
func NewRotateBackupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rotate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListBackupsWithResponse request
	ListBackupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListBackupsResponse, error)

	// TriggerBackupWithBodyWithResponse request with any body
	TriggerBackupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TriggerBackupResponse, error)

	TriggerBackupWithResponse(ctx context.Context, body TriggerBackupJSONRequestBody, reqEditors ...RequestEditorFn) (*TriggerBackupResponse, error)

	// DeleteBackupWithResponse request
	DeleteBackupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteBackupResponse, error)

	// GetBackupWithResponse request
	GetBackupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetBackupResponse, error)

	// TriggerBackupWithIdWithBodyWithResponse request with any body
	TriggerBackupWithIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TriggerBackupWithIdResponse, error)

	TriggerBackupWithIdWithResponse(ctx context.Context, id string, body TriggerBackupWithIdJSONRequestBody, reqEditors ...RequestEditorFn) (*TriggerBackupWithIdResponse, error)

	// TriggerRestoreWithBodyWithResponse request with any body
	TriggerRestoreWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TriggerRestoreResponse, error)

	TriggerRestoreWithResponse(ctx context.Context, id string, body TriggerRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*TriggerRestoreResponse, error)

	// RotateBackupsWithBodyWithResponse request with any body
	RotateBackupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RotateBackupsResponse, error)

	RotateBackupsWithResponse(ctx context.Context, body RotateBackupsJSONRequestBody, reqEditors ...RequestEditorFn) (*RotateBackupsResponse, error)

	// GetVersionWithResponse request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)
}

type ListBackupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Backups
}

// Status returns HTTPResponse.Status
func (r ListBackupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBackupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TriggerBackupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Backup
}

// Status returns HTTPResponse.Status
func (r TriggerBackupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TriggerBackupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBackupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBackupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBackupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBackupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Backup
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r GetBackupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TriggerBackupWithIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Backup
}

// Status returns HTTPResponse.Status
func (r TriggerBackupWithIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TriggerBackupWithIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TriggerRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
}

// Status returns HTTPResponse.Status
func (r TriggerRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TriggerRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RotateBackupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
}

// Status returns HTTPResponse.Status
func (r RotateBackupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RotateBackupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Version
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListBackupsWithResponse request returning *ListBackupsResponse
func (c *ClientWithResponses) ListBackupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListBackupsResponse, error) {
	rsp, err := c.ListBackups(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBackupsResponse(rsp)
}

// TriggerBackupWithBodyWithResponse request with arbitrary body returning *TriggerBackupResponse
func (c *ClientWithResponses) TriggerBackupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TriggerBackupResponse, error) {
	rsp, err := c.TriggerBackupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTriggerBackupResponse(rsp)
}

func (c *ClientWithResponses) TriggerBackupWithResponse(ctx context.Context, body TriggerBackupJSONRequestBody, reqEditors ...RequestEditorFn) (*TriggerBackupResponse, error) {
	rsp, err := c.TriggerBackup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTriggerBackupResponse(rsp)
}

// DeleteBackupWithResponse request returning *DeleteBackupResponse
func (c *ClientWithResponses) DeleteBackupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteBackupResponse, error) {
	rsp, err := c.DeleteBackup(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBackupResponse(rsp)
}

// GetBackupWithResponse request returning *GetBackupResponse
func (c *ClientWithResponses) GetBackupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetBackupResponse, error) {
	rsp, err := c.GetBackup(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBackupResponse(rsp)
}

// TriggerBackupWithIdWithBodyWithResponse request with arbitrary body returning *TriggerBackupWithIdResponse
func (c *ClientWithResponses) TriggerBackupWithIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TriggerBackupWithIdResponse, error) {
	rsp, err := c.TriggerBackupWithIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTriggerBackupWithIdResponse(rsp)
}

func (c *ClientWithResponses) TriggerBackupWithIdWithResponse(ctx context.Context, id string, body TriggerBackupWithIdJSONRequestBody, reqEditors ...RequestEditorFn) (*TriggerBackupWithIdResponse, error) {
	rsp, err := c.TriggerBackupWithId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTriggerBackupWithIdResponse(rsp)
}

// TriggerRestoreWithBodyWithResponse request with arbitrary body returning *TriggerRestoreResponse
func (c *ClientWithResponses) TriggerRestoreWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TriggerRestoreResponse, error) {
	rsp, err := c.TriggerRestoreWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTriggerRestoreResponse(rsp)
}

func (c *ClientWithResponses) TriggerRestoreWithResponse(ctx context.Context, id string, body TriggerRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*TriggerRestoreResponse, error) {
	rsp, err := c.TriggerRestore(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTriggerRestoreResponse(rsp)
}

// RotateBackupsWithBodyWithResponse request with arbitrary body returning *RotateBackupsResponse
func (c *ClientWithResponses) RotateBackupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RotateBackupsResponse, error) {
	rsp, err := c.RotateBackupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRotateBackupsResponse(rsp)
}

func (c *ClientWithResponses) RotateBackupsWithResponse(ctx context.Context, body RotateBackupsJSONRequestBody, reqEditors ...RequestEditorFn) (*RotateBackupsResponse, error) {
	rsp, err := c.RotateBackups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRotateBackupsResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// ParseListBackupsResponse parses an HTTP response from a ListBackupsWithResponse call
func ParseListBackupsResponse(rsp *http.Response) (*ListBackupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBackupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Backups
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTriggerBackupResponse parses an HTTP response from a TriggerBackupWithResponse call
func ParseTriggerBackupResponse(rsp *http.Response) (*TriggerBackupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TriggerBackupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Backup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteBackupResponse parses an HTTP response from a DeleteBackupWithResponse call
func ParseDeleteBackupResponse(rsp *http.Response) (*DeleteBackupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBackupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBackupResponse parses an HTTP response from a GetBackupWithResponse call
func ParseGetBackupResponse(rsp *http.Response) (*GetBackupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBackupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Backup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseTriggerBackupWithIdResponse parses an HTTP response from a TriggerBackupWithIdWithResponse call
func ParseTriggerBackupWithIdResponse(rsp *http.Response) (*TriggerBackupWithIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TriggerBackupWithIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Backup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTriggerRestoreResponse parses an HTTP response from a TriggerRestoreWithResponse call
func ParseTriggerRestoreResponse(rsp *http.Response) (*TriggerRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TriggerRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRotateBackupsResponse parses an HTTP response from a RotateBackupsWithResponse call
func ParseRotateBackupsResponse(rsp *http.Response) (*RotateBackupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RotateBackupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Version
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
